# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    main.txt                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: tsadouk <tsadouk@student.42.fr>            +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2023/12/03 19:37:47 by tsadouk           #+#    #+#              #
#    Updated: 2023/12/06 16:59:28 by tsadouk          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

// #include <mlx.h>

// typedef struct  s_data {
//     void        *img;
//     char        *addr;
//     int         bits_per_pixel;
//     int         line_length;
//     int         endian;
// }               t_data;

// void    my_mlx_pixel_put(t_data *data, int x, int y, int color)
// {
//     char    *dst;

//     dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
//     *(unsigned int*)dst = color;
// }

// void put_square(t_data *data, int x, int y, int size, int color)
// {
//     int i;
//     int j;

//     i = 0;
//     while (i < size)
//     {
//         j = 0;
//         while (j < size)
//         {
//             // Calculer la couleur dégradée en fonction de la position du pixel
//             int red = (color >> 16) & 0xFF;
//             int green = (color >> 8) & 0xFF;
//             int blue = color & 0xFF;
//             red -= i;
//             green -= j;
//             blue -= (i + j);

//             // Vérifier que les valeurs de couleur restent dans la plage valide (0-255)
//             red = red < 0 ? 0 : red;
//             green = green < 0 ? 0 : green;
//             blue = blue < 0 ? 0 : blue;

//             // Combinaison des composantes de couleur pour obtenir la couleur finale
//             int final_color = (red << 16) | (green << 8) | blue;

//             my_mlx_pixel_put(data, x + j, y + i, final_color);
//             j++;
//         }
//         i++;
//     }
// }


// void    put_triangle(t_data *data, int x, int y, int size, int color)
// {
//     int i;
//     int j;

//     i = 0;
//     while (i < size)
//     {
//         j = 0;
//         while (j < size - i)
//         {
//             my_mlx_pixel_put(data, x + i, y + j, color);
//             j++;
//         }
//         i++;
//     }
// }

// int main (void)
// {
//     void *mlx;
//     void *mlx_win;
//     t_data img;

//     mlx = mlx_init();
//     mlx_win = mlx_new_window(mlx, 1920, 1080, "Hello world!");
//     img.img = mlx_new_image(mlx, 1920, 1080);
//     img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length, &img.endian);
//     put_square(&img, 500, 500, 500, 0x00FF00);
//     //put_triangle(&img, 400, 400, 50, 0x00FF0000);
//     mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
//     mlx_loop(mlx);
// }